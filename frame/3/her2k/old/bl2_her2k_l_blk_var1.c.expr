/*
   libblis
   An object-based infrastructure for developing high-performance
   dense linear algebra libraries.

   Copyright (C) 2013, The University of Texas

   libblis is free software; you can redistribute it and/or modify
   it under the terms of the GNU Lesser General Public License as
   published by the Free Software Foundation; either version 2.1 of
   the License, or (at your option) any later version.

   libblis is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with libblis; if you did not receive a copy, see
   http://www.gnu.org/licenses/.

   For more information, please contact us at blis@cs.utexas.edu or
   send mail to:

   Field G. Van Zee and/or
   Robert A. van de Geijn
   The University of Texas at Austin
   Institute for Computational Engineering and Science
   1 University Station D9500
   Austin TX 78712
*/

#include "blis2.h"

extern gemm_t* gemm_cntl_bp_ke;

void bl2_her2k_l_blk_var1( obj_t*   alpha,
                           obj_t*   a,
                           obj_t*   bh,
                           obj_t*   alpha_conj,
                           obj_t*   b,
                           obj_t*   ah,
                           obj_t*   beta,
                           obj_t*   c,
                           her2k_t* cntl )
{
	obj_t a1, a1_pack;
	obj_t bh_pack, bhL_pack, bhM_pack;
	obj_t b1, b1_pack;
	obj_t ah_pack, ahL_pack, ahM_pack;
	obj_t c1;
	obj_t c1L, c1M, c1L_pack, c1M_pack;

	dim_t i;
	dim_t b_alg;
	dim_t m_trans;
	dim_t offL, nL;

	// Initialize all pack objects that are passed into packm_init().
	bl2_obj_init_pack( &a1_pack );
	bl2_obj_init_pack( &bh_pack );
	bl2_obj_init_pack( &b1_pack );
	bl2_obj_init_pack( &ah_pack );
	bl2_obj_init_pack( &c1L_pack );

	// Query dimension in partitioning direction.
	m_trans = bl2_obj_length_after_trans( *c );

	// Scale C by beta (if instructed).
	bl2_scalm_int( beta,
	               c,
	               cntl_sub_scalm( cntl ) );

	// Initialize objects for packing B' and A'.
	bl2_packm_init( bh, &bh_pack,
	                cntl_sub_packm_b( cntl ) );
	bl2_packm_init( ah, &ah_pack,
	                cntl_sub_packm_b( cntl ) );

	// Pack B' and scale by alpha (if instructed).
	bl2_packm_int( alpha,
	               bh, &bh_pack,
	               cntl_sub_packm_b( cntl ) );

	// Pack A' and scale by alpha_conj (if instructed).
	bl2_packm_int( alpha_conj,
	               ah, &ah_pack,
	               cntl_sub_packm_b( cntl ) );

	// Partition along the m dimension.
	for ( i = 0; i < m_trans; i += b_alg )
	{
		// Determine the current algorithmic blocksize.
		b_alg = bl2_determine_blocksize_b( i, m_trans, a,
		                                   cntl_blocksize( cntl ) );

		// Acquire partitions for A1, B1 and C1.
		bl2_acquire_mpart_b2t( BLIS_SUBPART1,
		                       i, b_alg, a, &a1 );
		bl2_acquire_mpart_b2t( BLIS_SUBPART1,
		                       i, b_alg, b, &b1 );
		bl2_acquire_mpart_b2t( BLIS_SUBPART1,
		                       i, b_alg, c, &c1 );

		// Partition off the stored region of C1 and the corresponding regions
		// of Bh_pack and Ah_pack. We compute the width of the subpartition
		// taking the location of the diagonal into account.
		offL = 0;
		nL   = bl2_min( bl2_obj_width_after_trans( c1 ),
		//                bl2_obj_diag_offset_after_trans( c1 ) + b_alg );
		                bl2_obj_diag_offset_after_trans( c1 ) );
		bl2_acquire_mpart_l2r( BLIS_SUBPART1,
		                       offL, nL, &c1, &c1L );
		bl2_acquire_mpart_l2r( BLIS_SUBPART1,
		                       offL, nL, &bh_pack, &bhL_pack );
		bl2_acquire_mpart_l2r( BLIS_SUBPART1,
		                       offL, nL, &ah_pack, &ahL_pack );
		bl2_acquire_mpart_l2r( BLIS_SUBPART1,
		                       nL, b_alg, &c1, &c1M );
		bl2_acquire_mpart_l2r( BLIS_SUBPART1,
		                       nL, b_alg, &bh_pack, &bhM_pack );
		bl2_acquire_mpart_l2r( BLIS_SUBPART1,
		                       nL, b_alg, &ah_pack, &ahM_pack );

		// Initialize objects for packing A1, B1, and C1.
		bl2_packm_init( &a1, &a1_pack,
		                cntl_sub_packm_a( cntl ) );
		bl2_packm_init( &b1, &b1_pack,
		                cntl_sub_packm_a( cntl ) );
		bl2_packm_init( &c1L, &c1L_pack,
		                cntl_sub_packm_c( cntl ) );
		bl2_packm_init( &c1M, &c1M_pack,
		                cntl_sub_packm_c( cntl ) );

		// Pack A1 and scale by alpha (if instructed).
		bl2_packm_int( alpha,
		               &a1, &a1_pack,
		               cntl_sub_packm_a( cntl ) );

		// Pack B1 and scale by alpha_conj (if instructed).
		bl2_packm_int( alpha_conj,
		               &b1, &b1_pack,
		               cntl_sub_packm_a( cntl ) );

		// Pack C1 and scale by beta (if instructed).
		if ( bl2_obj_width( c1L ) > 0 )
		bl2_packm_int( beta,
		               &c1L, &c1L_pack,
		               cntl_sub_packm_c( cntl ) );

		// Pack C1 and scale by beta (if instructed).
		bl2_packm_int( beta,
		               &c1M, &c1M_pack,
		               cntl_sub_packm_c( cntl ) );

		if ( bl2_obj_width( c1L ) > 0 )
		{
		bl2_gemm_int( alpha,
		              &a1_pack,
		              &bhL_pack,
		              beta,
		              &c1L_pack,
		              gemm_cntl_bp_ke );

		bl2_gemm_int( alpha_conj,
		              &b1_pack,
		              &ahL_pack,
		              beta,
		              &c1L_pack,
		              gemm_cntl_bp_ke );
		}

		// Perform her2k subproblem.
		bl2_her2k_int( alpha,
		               &a1_pack,
		               &bhM_pack,
		               alpha_conj,
		               &b1_pack,
		               &ahM_pack,
		               beta,
		               &c1M_pack,
		               cntl_sub_her2k( cntl ) );

		// Unpack C1 (if C1 was packed).
		if ( bl2_obj_width( c1L ) > 0 )
		bl2_unpackm_int( &c1L_pack, &c1L,
		                 cntl_sub_unpackm_c( cntl ) );
	}

	// If any packing buffers were acquired within packm, release them back
	// to the memory manager.
	bl2_obj_release_pack( &a1_pack );
	bl2_obj_release_pack( &bh_pack );
	bl2_obj_release_pack( &b1_pack );
	bl2_obj_release_pack( &ah_pack );
	bl2_obj_release_pack( &c1L_pack );
}

